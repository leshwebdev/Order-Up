{"version":3,"sources":["Ingredients.js","Basket.js","Banner.js","Checkout.js","App.js","serviceWorker.js","index.js"],"names":["Ingredients","props","className","Card","ingredients","map","ingredient","index","key","kind","types","type","Object","values","onClick","onAddToBasket","keys","src","picture","alt","Basket","Table","striped","bordered","colSpan","items","item","onRemoveFromBasket","Banner","Modal","show","isBannerShown","onHide","onHideBanner","Body","txt","Button","variant","Checkout","hover","reduce","sum","curItem","App","useState","ingredientArr","White","Brown","Shifon","Tomato","Lettuce","Cucumber","Mayo","Ketchup","Aioli","Ham","Chicken","Tofu","basket","msg","bannerIsShown","checkoutIsShown","state","setState","Row","Col","sm","md","updatedIngredientArr","kindIndex","findIndex","typeIndex","hasOwnProperty","itemType","newItem","updatedBasket","basketIndex","push","ingridient","ingridientType","splice","onShowBanner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a77f273.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction Ingredients(props) {\n  return (\n    <div className=\"container\">\n      <h2>Ingredients:</h2>\n      <Card>\n        <div className=\"flex col\">\n          {props.ingredients.map((ingredient, index) => (\n            <div className=\"line\" key={index}>\n              <div className=\"flex\">\n                <div className=\"flex col\">\n                  <div className=\"kind\">{ingredient.kind}:</div>\n                  <div className=\"flex\">\n                    <div className=\"flex col\">\n                      {ingredient.types.map((type, index) => (\n                      <div className={(Object.values(type) <1) ? \"ingredient strike-out\" : \"ingredient\"} key={index} onClick={() => props.onAddToBasket(ingredient.kind, Object.keys(type))}>\n                        {Object.keys(type)}\n                      </div>\n                      ))}\n                    </div>\n                    <div><img className=\"ingredient-img\" src={ingredient.picture} alt=\"\" /></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default Ingredients;\n","import React from \"react\";\nimport { Card, Table } from \"react-bootstrap\";\n\nfunction Basket(props) {\n  return (\n    <div className=\"container flex col\">\n      <h2>Basket:</h2>\n      <Card>\n        <Table striped bordered>\n          <thead>\n            <tr>\n              <th>Item</th>\n              <th colSpan=\"2\">Quantity</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.items.map((item, index) => (\n              <tr key={index}>\n                <td>{Object.keys(item)[0]}</td>\n                <td>{Object.values(item)[0]}</td>\n                <td className=\"remove\" onClick={() => props.onRemoveFromBasket(item)}>x</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Card>\n    </div>\n  );\n}\n\nexport default Basket;\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction Banner(props) {\n    return (\n      <Modal show={props.isBannerShown} onHide={props.onHideBanner}>\n        <Modal.Body>{props.txt}</Modal.Body>\n          <Button className=\"space-around\" variant=\"primary\" onClick={props.onHideBanner}>\n            Okay\n          </Button>\n      </Modal>\n    );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport { Card, Table } from \"react-bootstrap\";\n\nfunction Checkout(props) {\n  return (\n    <div>\n      <h2>Here are your items:</h2>\n      <Card>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Item</th>\n              <th>Quantity</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.items.map((item, index) => (\n              <tr key={index}>\n                <td>{index}</td>\n                <td>{Object.keys(item)[0]}</td>\n                <td>{Object.values(item)[0]}</td>\n              </tr>\n            ))}\n            <tr>\n              <td colSpan=\"2\">Number of items:</td>\n              <td>\n                {props.items.reduce((sum, curItem) => sum + Object.values(curItem)[0], 0)}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      </Card>\n    </div>\n  );\n}\n\nexport default Checkout;\n","import React, { useState } from \"react\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport Ingrediens from \"./Ingredients\";\nimport Basket from \"./Basket\";\nimport Banner from \"./Banner\";\nimport Checkout from \"./Checkout\";\nimport \"./App.css\";\n\nfunction App() {\n  const [state, setState] = useState({\n    ingredientArr: [\n      { kind: \"Breads\", types: [{ White: 3 }, { Brown: 4 }, { Shifon: 2 }], picture: \"./img/breads.png\" },\n      { kind: \"Vegetables\", types: [{ Tomato: 2 }, { Lettuce: 4 }, { Cucumber: 3 }], picture: \"./img/vegetables.png\" },\n      { kind: \"Spreads\", types: [{ Mayo: 5 }, { Ketchup: 3 }, { Aioli: 2 }], picture: \"./img/spreads.png\" },\n      { kind: \"Meats\", types: [{ Ham: 4 }, { Chicken: 3 }, { Tofu: 2 }], picture: \"./img/meats.png\" }\n    ],\n    basket: [],\n    msg: \"\",\n    bannerIsShown: false,\n    checkoutIsShown: false\n  });\n\n  const addToBasket = (kind, type) => {\n    const updatedIngredientArr = [...state.ingredientArr];\n    const kindIndex = updatedIngredientArr.findIndex(item => item.kind === kind);\n    const typeIndex = updatedIngredientArr[kindIndex].types.findIndex(item => item.hasOwnProperty(type));\n    if (updatedIngredientArr[kindIndex].types[typeIndex][type] > 0){\n      updatedIngredientArr[kindIndex].types[typeIndex][type]--;\n      const itemType = type[0];\n      const newItem = {[itemType] : 1, kind};\n      const updatedBasket = [...state.basket];\n      const basketIndex = updatedBasket.findIndex(item => item.hasOwnProperty(type))\n      if (basketIndex !== -1) {\n        updatedBasket[basketIndex][itemType]++;\n       } else {\n         updatedBasket.push(newItem);\n       }\n      setState((state) => ({ ...state, bannerIsShown: false, ingredientArr: updatedIngredientArr, basket: updatedBasket }));\n    } else {\n      setState((state) => ({ ...state, msg: `no ${type[0]} ${kind} left in stock!`, bannerIsShown: true }));\n    }\n  };\n\n  const removeFromBasket = (ingridient) => {\n    const ingridientType = Object.keys(ingridient)[0];\n    const updatedBasket = [...state.basket];\n    const basketIndex = updatedBasket.findIndex(item => item.hasOwnProperty(ingridientType))\n    updatedBasket[basketIndex][ingridientType]--;\n    if (updatedBasket[basketIndex][ingridientType] === 0) {\n      updatedBasket.splice(basketIndex,1);\n    }\n    const updatedIngredientArr = [...state.ingredientArr];\n    const kindIndex = updatedIngredientArr.findIndex(item => item.kind === ingridient.kind);\n    const typeIndex = updatedIngredientArr[kindIndex].types.findIndex(item => item.hasOwnProperty(ingridientType));\n    updatedIngredientArr[kindIndex].types[typeIndex][ingridientType]++;\n    setState((state) => ({ ...state, bannerIsShown: false, basket: updatedBasket, ingredientArr: updatedIngredientArr }));\n  }\n\n  const checkout = () => {\n    setState((state) => ({ ...state, msg : <Checkout  items={state.basket} /> }));\n    setState((state) => ({ ...state, bannerIsShown: true }));\n  }\n\n  const bannerHide = () => setState((state) => ({ ...state, bannerIsShown : false }));\n  const bannerShow = () => setState((state) => ({ ...state, bannerIsShown : true }));\n\n  return (\n    <div className=\"App flex col\">\n      <div className=\"title\">Order Up !</div>\n      {/* <div className=\"container\"> */}\n      <Row>\n        <Col sm={6} md={8}><Ingrediens ingredients={state.ingredientArr} onAddToBasket={addToBasket} /></Col>\n        <Col sm={6} md={4}><Basket items={state.basket} onRemoveFromBasket={removeFromBasket} /></Col>\n        </Row>\n      {/* </div> */}\n      <Banner isBannerShown={state.bannerIsShown} onShowBanner={bannerShow} onHideBanner={bannerHide} txt={state.msg} />\n      <Button onClick={() => checkout()}>Place Order</Button>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}